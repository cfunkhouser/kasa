package kasa

import (
	"errors"
	"fmt"
	"net"
	"testing"

	"github.com/google/go-cmp/cmp"
)

func TestDecrypt(t *testing.T) {
	for tn, tc := range map[string]struct {
		data []byte
		want []byte
	}{
		"get_sysinfo response": {
			data: []byte{
				0xd0, 0xf2, 0x81, 0xf8, 0x8b, 0xff, 0x9a, 0xf7, 0xd5, 0xef,
				0x94, 0xb6, 0xd1, 0xb4, 0xc0, 0x9f, 0xec, 0x95, 0xe6, 0x8f,
				0xe1, 0x87, 0xe8, 0xca, 0xf0, 0x8b, 0xa9, 0xda, 0xad, 0xf2,
				0x84, 0xe1, 0x93, 0xb1, 0x8b, 0xa9, 0x98, 0xb6, 0x86, 0xa8,
				0x9b, 0xbb, 0xf9, 0x8c, 0xe5, 0x89, 0xed, 0xcd, 0xff, 0xcf,
				0xff, 0xc7, 0xf7, 0xc3, 0xe3, 0xb1, 0xd4, 0xb8, 0x96, 0xa7,
				0x97, 0xa2, 0x97, 0xa7, 0x95, 0xb7, 0x9b, 0xb9, 0xd1, 0xa6,
				0xf9, 0x8f, 0xea, 0x98, 0xba, 0x80, 0xa2, 0x91, 0xbf, 0x8f,
				0xad, 0x81, 0xa3, 0xce, 0xa1, 0xc5, 0xa0, 0xcc, 0xee, 0xd4,
				0xf6, 0xbe, 0xed, 0xdc, 0xec, 0xdf, 0xf7, 0xa2, 0xf1, 0xd8,
				0xfa, 0xd6, 0xf4, 0x90, 0xf5, 0x83, 0xea, 0x89, 0xec, 0xa5,
				0xc1, 0xe3, 0xd9, 0xfb, 0xc3, 0xf3, 0xc3, 0xf5, 0xb4, 0xf5,
				0xb0, 0x80, 0xc1, 0x84, 0xb1, 0xf5, 0xb3, 0x84, 0xc5, 0x84,
				0xb1, 0xf3, 0xb7, 0xf4, 0xb7, 0xf4, 0xcc, 0x8d, 0xb5, 0xf6,
				0xb3, 0x86, 0xb3, 0xf6, 0xb2, 0x8b, 0xba, 0xfe, 0xbc, 0xfa,
				0xc2, 0xf5, 0xb7, 0xf1, 0xd3, 0xff, 0xdd, 0xb2, 0xd7, 0xba,
				0xf3, 0x97, 0xb5, 0x8f, 0xad, 0x9c, 0xa5, 0x97, 0xa2, 0x97,
				0xa0, 0x95, 0xd7, 0xe0, 0xd8, 0xe1, 0xd8, 0xe8, 0xde, 0xec,
				0xaa, 0x98, 0xac, 0x9e, 0xd8, 0xe9, 0xdc, 0x9a, 0xad, 0xec,
				0xaa, 0xef, 0xdb, 0x9f, 0xab, 0x93, 0xa5, 0x87, 0xab, 0x89,
				0xe1, 0x96, 0xdf, 0xbb, 0x99, 0xa3, 0x81, 0xb9, 0x89, 0xca,
				0x88, 0xbf, 0x8c, 0xba, 0x8d, 0xce, 0x8b, 0xca, 0xfc, 0xb9,
				0x8a, 0xc8, 0xfe, 0xba, 0xf9, 0xc0, 0xf6, 0xb5, 0x87, 0xbf,
				0x8a, 0xbf, 0xfa, 0xbf, 0x88, 0xcb, 0xfc, 0xc5, 0x84, 0xa6,
				0x8a, 0xa8, 0xda, 0xa9, 0xda, 0xb3, 0x91, 0xab, 0x86, 0xb3,
				0x82, 0xae, 0x8c, 0xe0, 0x8f, 0xe1, 0x86, 0xef, 0x9b, 0xee,
				0x8a, 0xef, 0xb0, 0xd9, 0xfb, 0xc1, 0xec, 0xdb, 0xee, 0xd7,
				0xef, 0xd8, 0xea, 0xc6, 0xe4, 0x88, 0xe9, 0x9d, 0xf4, 0x80,
				0xf5, 0x91, 0xf4, 0xab, 0xc2, 0xe0, 0xda, 0xe9, 0xdc, 0xed,
				0xdc, 0xe8, 0xda, 0xf6, 0xd4, 0xb5, 0xd9, 0xb0, 0xd1, 0xa2,
				0x80, 0xba, 0x98, 0xd9, 0x9d, 0xce, 0x82, 0xa2, 0xef, 0x80,
				0xe4, 0x81, 0xec, 0xce, 0xe2, 0xc0, 0xb3, 0xc7, 0xa6, 0xd2,
				0xa7, 0xd4, 0xf6, 0xcc, 0xee, 0x80, 0xe5, 0x92, 0xb0, 0x9c,
				0xbe, 0xd3, 0xba, 0xd9, 0x86, 0xf2, 0x8b, 0xfb, 0x9e, 0xbc,
				0x86, 0xa4, 0xed, 0xa2, 0xf6, 0xd8, 0x8b, 0xc6, 0x87, 0xd5,
				0x81, 0xd1, 0x9d, 0xc8, 0x8f, 0xdc, 0x8b, 0xc2, 0x96, 0xd5,
				0x9d, 0xbf, 0x93, 0xb1, 0xd7, 0xb2, 0xd3, 0xa7, 0xd2, 0xa0,
				0xc5, 0xe7, 0xdd, 0xff, 0xab, 0xe2, 0xaf, 0x8d, 0xa1, 0x83,
				0xee, 0x8f, 0xec, 0xce, 0xf4, 0xd6, 0x93, 0xa7, 0x9d, 0xde,
				0xed, 0xd7, 0xe5, 0xa4, 0x9e, 0xdd, 0xeb, 0xd1, 0xe7, 0xd5,
				0xef, 0xdd, 0xed, 0xcf, 0xe3, 0xc1, 0xb4, 0xc4, 0xa0, 0xc1,
				0xb5, 0xdc, 0xb2, 0xd5, 0xf7, 0xcd, 0xfd, 0xd1, 0xf3, 0x9f,
				0xfa, 0x9e, 0xc1, 0xae, 0xc8, 0xae, 0x8c, 0xb6, 0x86, 0xaa,
				0x88, 0xfa, 0x9f, 0xf3, 0x92, 0xeb, 0xb4, 0xc7, 0xb3, 0xd2,
				0xa6, 0xc3, 0xe1, 0xdb, 0xea, 0xc6, 0xe4, 0x8b, 0xe5, 0xba,
				0xce, 0xa7, 0xca, 0xaf, 0x8d, 0xb7, 0x81, 0xb9, 0x8a, 0xbb,
				0x97, 0xb5, 0xd4, 0xb7, 0xc3, 0xaa, 0xdc, 0xb9, 0xe6, 0x8b,
				0xe4, 0x80, 0xe5, 0xc7, 0xfd, 0xdf, 0xb1, 0xde, 0xb0, 0xd5,
				0xf7, 0xdb, 0xf9, 0x90, 0xf3, 0x9c, 0xf2, 0xad, 0xc5, 0xa4,
				0xd7, 0xbf, 0x9d, 0xa7, 0x85, 0xa7, 0x8b, 0xa9, 0xcd, 0xa8,
				0xde, 0x81, 0xef, 0x8e, 0xe3, 0x86, 0xa4, 0x9e, 0xbc, 0xef,
				0x82, 0xe3, 0x91, 0xe5, 0xc5, 0x92, 0xfb, 0xd6, 0x90, 0xf9,
				0xd9, 0x89, 0xe5, 0x90, 0xf7, 0xd7, 0x9a, 0xf3, 0x9d, 0xf4,
				0xd6, 0xfa, 0xd8, 0xb6, 0xd3, 0xab, 0xdf, 0x80, 0xe1, 0x82,
				0xf6, 0x9f, 0xf0, 0x9e, 0xbc, 0x86, 0xfd, 0xdf, 0xab, 0xd2,
				0xa2, 0xc7, 0xe5, 0xdf, 0xf2, 0xc3, 0xbe, 0x92, 0xb0, 0xde,
				0xaa, 0xc9, 0x96, 0xe5, 0x91, 0xf0, 0x84, 0xe1, 0xc3, 0xf9,
				0xc9, 0xe5, 0xc7, 0xa2, 0xd0, 0xa2, 0xfd, 0x9e, 0xf1, 0x95,
				0xf0, 0xd2, 0xe8, 0xd8, 0xa5, 0xd8, 0xf4, 0xd6, 0xb3, 0xde,
				0xbb, 0xcf, 0xaa, 0xd8, 0xfa, 0xc0, 0xbb, 0x99, 0xfc, 0x8e,
				0xfc, 0xa3, 0xc0, 0xaf, 0xcb, 0xae, 0x8c, 0xb6, 0x9b, 0xaa,
				0x86, 0xa4, 0xc1, 0xb3, 0xc1, 0x9e, 0xf3, 0x80, 0xe7, 0xc5,
				0xff, 0xdd, 0xb0, 0xdf, 0xbb, 0xce, 0xa2, 0xc7, 0xe7, 0x89,
				0xe6, 0x92, 0xb2, 0xc1, 0xb4, 0xc4, 0xb4, 0xdb, 0xa9, 0xdd,
				0xff, 0x82, 0xff,
			},
			want: []byte(`{"system":{"get_sysinfo":{"sw_ver":"1.0.3 Build 200804 Rel.105502","hw_ver":"3.0","model":"HS103(US)","deviceId":"8006AAE0AE5DF7AA5BDCCC8A8CE55ED91DBF87BF","oemId":"1925575B7899062F242F15F7AFE4D486","hwId":"80CB7367CEA6E3B6DC96C2855EE7C79A","rssi":-51,"longitude_i":-759872,"latitude_i":351142,"alias":"ADSL Modem","status":"new","mic_type":"IOT.SMARTPLUGSWITCH","feature":"TIM","mac":"E4:C3:2A:C6:62:20","updating":0,"led_off":0,"relay_state":1,"on_time":6831,"active_mode":"none","icon_hash":"","dev_name":"Smart Wi-Fi Plug Mini","next_action":{"type":-1},"ntc_state":0,"err_code":0}},"emeter":{"err_code":-1,"err_msg":"module not support"}}`),
		},
	} {
		t.Run(tn, func(t *testing.T) {
			got := decrypt(tc.data)
			if diff := cmp.Diff(tc.want, got); diff != "" {
				t.Errorf("decrypt(): mismatch (-got +want):\n%v", diff)
			}
		})
	}
}

func BenchmarkDecrypt(b *testing.B) {
	for tn, tc := range map[string]struct {
		data []byte
	}{
		"get_sysinfo response": {
			data: []byte{
				0xd0, 0xf2, 0x81, 0xf8, 0x8b, 0xff, 0x9a, 0xf7, 0xd5, 0xef,
				0x94, 0xb6, 0xd1, 0xb4, 0xc0, 0x9f, 0xec, 0x95, 0xe6, 0x8f,
				0xe1, 0x87, 0xe8, 0xca, 0xf0, 0x8b, 0xa9, 0xda, 0xad, 0xf2,
				0x84, 0xe1, 0x93, 0xb1, 0x8b, 0xa9, 0x98, 0xb6, 0x86, 0xa8,
				0x9b, 0xbb, 0xf9, 0x8c, 0xe5, 0x89, 0xed, 0xcd, 0xff, 0xcf,
				0xff, 0xc7, 0xf7, 0xc3, 0xe3, 0xb1, 0xd4, 0xb8, 0x96, 0xa7,
				0x97, 0xa2, 0x97, 0xa7, 0x95, 0xb7, 0x9b, 0xb9, 0xd1, 0xa6,
				0xf9, 0x8f, 0xea, 0x98, 0xba, 0x80, 0xa2, 0x91, 0xbf, 0x8f,
				0xad, 0x81, 0xa3, 0xce, 0xa1, 0xc5, 0xa0, 0xcc, 0xee, 0xd4,
				0xf6, 0xbe, 0xed, 0xdc, 0xec, 0xdf, 0xf7, 0xa2, 0xf1, 0xd8,
				0xfa, 0xd6, 0xf4, 0x90, 0xf5, 0x83, 0xea, 0x89, 0xec, 0xa5,
				0xc1, 0xe3, 0xd9, 0xfb, 0xc3, 0xf3, 0xc3, 0xf5, 0xb4, 0xf5,
				0xb0, 0x80, 0xc1, 0x84, 0xb1, 0xf5, 0xb3, 0x84, 0xc5, 0x84,
				0xb1, 0xf3, 0xb7, 0xf4, 0xb7, 0xf4, 0xcc, 0x8d, 0xb5, 0xf6,
				0xb3, 0x86, 0xb3, 0xf6, 0xb2, 0x8b, 0xba, 0xfe, 0xbc, 0xfa,
				0xc2, 0xf5, 0xb7, 0xf1, 0xd3, 0xff, 0xdd, 0xb2, 0xd7, 0xba,
				0xf3, 0x97, 0xb5, 0x8f, 0xad, 0x9c, 0xa5, 0x97, 0xa2, 0x97,
				0xa0, 0x95, 0xd7, 0xe0, 0xd8, 0xe1, 0xd8, 0xe8, 0xde, 0xec,
				0xaa, 0x98, 0xac, 0x9e, 0xd8, 0xe9, 0xdc, 0x9a, 0xad, 0xec,
				0xaa, 0xef, 0xdb, 0x9f, 0xab, 0x93, 0xa5, 0x87, 0xab, 0x89,
				0xe1, 0x96, 0xdf, 0xbb, 0x99, 0xa3, 0x81, 0xb9, 0x89, 0xca,
				0x88, 0xbf, 0x8c, 0xba, 0x8d, 0xce, 0x8b, 0xca, 0xfc, 0xb9,
				0x8a, 0xc8, 0xfe, 0xba, 0xf9, 0xc0, 0xf6, 0xb5, 0x87, 0xbf,
				0x8a, 0xbf, 0xfa, 0xbf, 0x88, 0xcb, 0xfc, 0xc5, 0x84, 0xa6,
				0x8a, 0xa8, 0xda, 0xa9, 0xda, 0xb3, 0x91, 0xab, 0x86, 0xb3,
				0x82, 0xae, 0x8c, 0xe0, 0x8f, 0xe1, 0x86, 0xef, 0x9b, 0xee,
				0x8a, 0xef, 0xb0, 0xd9, 0xfb, 0xc1, 0xec, 0xdb, 0xee, 0xd7,
				0xef, 0xd8, 0xea, 0xc6, 0xe4, 0x88, 0xe9, 0x9d, 0xf4, 0x80,
				0xf5, 0x91, 0xf4, 0xab, 0xc2, 0xe0, 0xda, 0xe9, 0xdc, 0xed,
				0xdc, 0xe8, 0xda, 0xf6, 0xd4, 0xb5, 0xd9, 0xb0, 0xd1, 0xa2,
				0x80, 0xba, 0x98, 0xd9, 0x9d, 0xce, 0x82, 0xa2, 0xef, 0x80,
				0xe4, 0x81, 0xec, 0xce, 0xe2, 0xc0, 0xb3, 0xc7, 0xa6, 0xd2,
				0xa7, 0xd4, 0xf6, 0xcc, 0xee, 0x80, 0xe5, 0x92, 0xb0, 0x9c,
				0xbe, 0xd3, 0xba, 0xd9, 0x86, 0xf2, 0x8b, 0xfb, 0x9e, 0xbc,
				0x86, 0xa4, 0xed, 0xa2, 0xf6, 0xd8, 0x8b, 0xc6, 0x87, 0xd5,
				0x81, 0xd1, 0x9d, 0xc8, 0x8f, 0xdc, 0x8b, 0xc2, 0x96, 0xd5,
				0x9d, 0xbf, 0x93, 0xb1, 0xd7, 0xb2, 0xd3, 0xa7, 0xd2, 0xa0,
				0xc5, 0xe7, 0xdd, 0xff, 0xab, 0xe2, 0xaf, 0x8d, 0xa1, 0x83,
				0xee, 0x8f, 0xec, 0xce, 0xf4, 0xd6, 0x93, 0xa7, 0x9d, 0xde,
				0xed, 0xd7, 0xe5, 0xa4, 0x9e, 0xdd, 0xeb, 0xd1, 0xe7, 0xd5,
				0xef, 0xdd, 0xed, 0xcf, 0xe3, 0xc1, 0xb4, 0xc4, 0xa0, 0xc1,
				0xb5, 0xdc, 0xb2, 0xd5, 0xf7, 0xcd, 0xfd, 0xd1, 0xf3, 0x9f,
				0xfa, 0x9e, 0xc1, 0xae, 0xc8, 0xae, 0x8c, 0xb6, 0x86, 0xaa,
				0x88, 0xfa, 0x9f, 0xf3, 0x92, 0xeb, 0xb4, 0xc7, 0xb3, 0xd2,
				0xa6, 0xc3, 0xe1, 0xdb, 0xea, 0xc6, 0xe4, 0x8b, 0xe5, 0xba,
				0xce, 0xa7, 0xca, 0xaf, 0x8d, 0xb7, 0x81, 0xb9, 0x8a, 0xbb,
				0x97, 0xb5, 0xd4, 0xb7, 0xc3, 0xaa, 0xdc, 0xb9, 0xe6, 0x8b,
				0xe4, 0x80, 0xe5, 0xc7, 0xfd, 0xdf, 0xb1, 0xde, 0xb0, 0xd5,
				0xf7, 0xdb, 0xf9, 0x90, 0xf3, 0x9c, 0xf2, 0xad, 0xc5, 0xa4,
				0xd7, 0xbf, 0x9d, 0xa7, 0x85, 0xa7, 0x8b, 0xa9, 0xcd, 0xa8,
				0xde, 0x81, 0xef, 0x8e, 0xe3, 0x86, 0xa4, 0x9e, 0xbc, 0xef,
				0x82, 0xe3, 0x91, 0xe5, 0xc5, 0x92, 0xfb, 0xd6, 0x90, 0xf9,
				0xd9, 0x89, 0xe5, 0x90, 0xf7, 0xd7, 0x9a, 0xf3, 0x9d, 0xf4,
				0xd6, 0xfa, 0xd8, 0xb6, 0xd3, 0xab, 0xdf, 0x80, 0xe1, 0x82,
				0xf6, 0x9f, 0xf0, 0x9e, 0xbc, 0x86, 0xfd, 0xdf, 0xab, 0xd2,
				0xa2, 0xc7, 0xe5, 0xdf, 0xf2, 0xc3, 0xbe, 0x92, 0xb0, 0xde,
				0xaa, 0xc9, 0x96, 0xe5, 0x91, 0xf0, 0x84, 0xe1, 0xc3, 0xf9,
				0xc9, 0xe5, 0xc7, 0xa2, 0xd0, 0xa2, 0xfd, 0x9e, 0xf1, 0x95,
				0xf0, 0xd2, 0xe8, 0xd8, 0xa5, 0xd8, 0xf4, 0xd6, 0xb3, 0xde,
				0xbb, 0xcf, 0xaa, 0xd8, 0xfa, 0xc0, 0xbb, 0x99, 0xfc, 0x8e,
				0xfc, 0xa3, 0xc0, 0xaf, 0xcb, 0xae, 0x8c, 0xb6, 0x9b, 0xaa,
				0x86, 0xa4, 0xc1, 0xb3, 0xc1, 0x9e, 0xf3, 0x80, 0xe7, 0xc5,
				0xff, 0xdd, 0xb0, 0xdf, 0xbb, 0xce, 0xa2, 0xc7, 0xe7, 0x89,
				0xe6, 0x92, 0xb2, 0xc1, 0xb4, 0xc4, 0xb4, 0xdb, 0xa9, 0xdd,
				0xff, 0x82, 0xff,
			},
		},
	} {
		b.Run(tn, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				encrypt(tc.data)
			}
		})
	}
}

func TestEncrypt(t *testing.T) {
	for tn, tc := range map[string]struct {
		data []byte
		want []byte
	}{
		"get_sysinfo request": {
			data: []byte(`{"system":{"get_sysinfo":null}}`),
			want: []byte{
				0xd0, 0xf2, 0x81, 0xf8, 0x8b, 0xff, 0x9a, 0xf7, 0xd5, 0xef,
				0x94, 0xb6, 0xd1, 0xb4, 0xc0, 0x9f, 0xec, 0x95, 0xe6, 0x8f,
				0xe1, 0x87, 0xe8, 0xca, 0xf0, 0x9e, 0xeb, 0x87, 0xeb, 0x96,
				0xeb,
			},
		},
		"set_relay_state on request": {
			data: []byte(`{"system":{"set_relay_state":{"state":1}}}`),
			want: []byte{
				0xd0, 0xf2, 0x81, 0xf8, 0x8b, 0xff, 0x9a, 0xf7, 0xd5, 0xef,
				0x94, 0xb6, 0xc5, 0xa0, 0xd4, 0x8b, 0xf9, 0x9c, 0xf0, 0x91,
				0xe8, 0xb7, 0xc4, 0xb0, 0xd1, 0xa5, 0xc0, 0xe2, 0xd8, 0xa3,
				0x81, 0xf2, 0x86, 0xe7, 0x93, 0xf6, 0xd4, 0xee, 0xdf, 0xa2,
				0xdf, 0xa2,
			},
		},
	} {
		t.Run(tn, func(t *testing.T) {
			got := encrypt(tc.data)
			if diff := cmp.Diff(tc.want, got); diff != "" {
				t.Errorf("encrypt(): mismatch (-got +want):\n%v", diff)
			}
		})
	}
}

func BenchmarkEncrypt(b *testing.B) {
	for tn, tc := range map[string]struct {
		data []byte
	}{
		"get_sysinfo request": {
			data: []byte(`{"system":{"get_sysinfo":null}}`),
		},
		"set_relay_state on request": {
			data: []byte(`{"system":{"set_relay_state":{"state":1}}}`),
		},
	} {
		b.Run(tn, func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				encrypt(tc.data)
			}
		})
	}
}

func TestAPIMessageEncode(t *testing.T) {
	for tn, tc := range map[string]struct {
		payload APIMessage
		want    []byte
	}{
		"get_sysinfo request": {
			payload: APIMessage{
				System: map[string]interface{}{
					"get_sysinfo": nil,
				},
			},
			want: []byte{
				0xd0, 0xf2, 0x81, 0xf8, 0x8b, 0xff, 0x9a, 0xf7, 0xd5, 0xef,
				0x94, 0xb6, 0xd1, 0xb4, 0xc0, 0x9f, 0xec, 0x95, 0xe6, 0x8f,
				0xe1, 0x87, 0xe8, 0xca, 0xf0, 0x9e, 0xeb, 0x87, 0xeb, 0x96,
				0xeb,
			},
		},
		"set_relay_state off request": {
			payload: APIMessage{
				System: map[string]interface{}{
					"set_relay_state": map[string]interface{}{
						"state": 0.0,
					},
				},
			},
			want: []byte{
				0xd0, 0xf2, 0x81, 0xf8, 0x8b, 0xff, 0x9a, 0xf7, 0xd5, 0xef,
				0x94, 0xb6, 0xc5, 0xa0, 0xd4, 0x8b, 0xf9, 0x9c, 0xf0, 0x91,
				0xe8, 0xb7, 0xc4, 0xb0, 0xd1, 0xa5, 0xc0, 0xe2, 0xd8, 0xa3,
				0x81, 0xf2, 0x86, 0xe7, 0x93, 0xf6, 0xd4, 0xee, 0xde, 0xa3,
				0xde, 0xa3,
			},
		},
		"set_relay_state on request": {
			payload: APIMessage{
				System: map[string]interface{}{
					"set_relay_state": map[string]interface{}{
						"state": 1.0,
					},
				},
			},
			want: []byte{
				0xd0, 0xf2, 0x81, 0xf8, 0x8b, 0xff, 0x9a, 0xf7, 0xd5, 0xef,
				0x94, 0xb6, 0xc5, 0xa0, 0xd4, 0x8b, 0xf9, 0x9c, 0xf0, 0x91,
				0xe8, 0xb7, 0xc4, 0xb0, 0xd1, 0xa5, 0xc0, 0xe2, 0xd8, 0xa3,
				0x81, 0xf2, 0x86, 0xe7, 0x93, 0xf6, 0xd4, 0xee, 0xdf, 0xa2,
				0xdf, 0xa2,
			},
		},
	} {
		t.Run(tn, func(t *testing.T) {
			got, _ := tc.payload.Encode()
			if diff := cmp.Diff(tc.want, got); diff != "" {
				t.Errorf("Encode(): mismatch (-got +want):\n%v", diff)
			}
		})
	}
}

func TestAPIMessageGetModule(t *testing.T) {
	for tn, tc := range map[string]struct {
		want   map[string]interface{}
		wantOK bool
		msg    *APIMessage
	}{
		"nil": {},
		"has nil map": {
			msg: &APIMessage{},
		},
		"doesn't have module": {
			msg: &APIMessage{
				System: make(map[string]interface{}),
			},
		},
		"has module": {
			want: map[string]interface{}{
				"hello": "world",
			},
			wantOK: true,
			msg: &APIMessage{
				System: map[string]interface{}{
					"test_module": map[string]interface{}{
						"hello": "world",
					},
				},
			},
		},
	} {
		t.Run(tn, func(t *testing.T) {
			got, ok := tc.msg.GetModule("test_module")
			if ok != tc.wantOK {
				t.Errorf("GetModule(): mismatch: ok: %v wantOK: %v", ok, tc.wantOK)
			}
			if diff := cmp.Diff(tc.want, got); diff != "" {
				t.Errorf("GetModule(): mismatch (-got +want):\n%v", diff)
			}
		})
	}
}

func TestDecodeAPIMessage(t *testing.T) {
	for tn, tc := range map[string]struct {
		want APIMessage
		data []byte
	}{
		"get_sysinfo request": {
			want: APIMessage{
				System: map[string]interface{}{
					"get_sysinfo": nil,
				},
			},
			data: []byte{
				0xd0, 0xf2, 0x81, 0xf8, 0x8b, 0xff, 0x9a, 0xf7, 0xd5, 0xef,
				0x94, 0xb6, 0xd1, 0xb4, 0xc0, 0x9f, 0xec, 0x95, 0xe6, 0x8f,
				0xe1, 0x87, 0xe8, 0xca, 0xf0, 0x9e, 0xeb, 0x87, 0xeb, 0x96,
				0xeb,
			},
		},
		"set_relay_state off request": {
			want: APIMessage{
				System: map[string]interface{}{
					"set_relay_state": map[string]interface{}{
						"state": 0.0,
					},
				},
			},
			data: []byte{
				0xd0, 0xf2, 0x81, 0xf8, 0x8b, 0xff, 0x9a, 0xf7, 0xd5, 0xef,
				0x94, 0xb6, 0xc5, 0xa0, 0xd4, 0x8b, 0xf9, 0x9c, 0xf0, 0x91,
				0xe8, 0xb7, 0xc4, 0xb0, 0xd1, 0xa5, 0xc0, 0xe2, 0xd8, 0xa3,
				0x81, 0xf2, 0x86, 0xe7, 0x93, 0xf6, 0xd4, 0xee, 0xde, 0xa3,
				0xde, 0xa3,
			},
		},
		"set_relay_state on request": {
			want: APIMessage{
				System: map[string]interface{}{
					"set_relay_state": map[string]interface{}{
						"state": 1.0,
					},
				},
			},
			data: []byte{
				0xd0, 0xf2, 0x81, 0xf8, 0x8b, 0xff, 0x9a, 0xf7, 0xd5, 0xef,
				0x94, 0xb6, 0xc5, 0xa0, 0xd4, 0x8b, 0xf9, 0x9c, 0xf0, 0x91,
				0xe8, 0xb7, 0xc4, 0xb0, 0xd1, 0xa5, 0xc0, 0xe2, 0xd8, 0xa3,
				0x81, 0xf2, 0x86, 0xe7, 0x93, 0xf6, 0xd4, 0xee, 0xdf, 0xa2,
				0xdf, 0xa2,
			},
		},
	} {
		t.Run(tn, func(t *testing.T) {
			var got APIMessage
			_ = DecodeAPIMessage(tc.data, &got)
			if diff := cmp.Diff(tc.want, got); diff != "" {
				t.Errorf("DecodeAPIMessage(): mismatch (-got +want):\n%v", diff)
			}
		})
	}
}

func TestSystemInformationErr(t *testing.T) {
	for tn, tc := range map[string]struct {
		si   SystemInformation
		want error
	}{
		"not an error": {
			si: SystemInformation{},
		},
		"code only": {
			si: SystemInformation{
				ErrorCode: 42,
			},
			want: fmt.Errorf("%w: error code 42", ErrGetSysinfoFailed),
		},
		"code and message": {
			si: SystemInformation{
				ErrorCode: 42,
				Error:     "Uh-oh",
			},
			want: fmt.Errorf("%w: error code 42: Uh-oh", ErrGetSysinfoFailed),
		},
	} {
		t.Run(tn, func(t *testing.T) {
			got := tc.si.Err()
			if got == nil && tc.want == nil {
				return
			}
			if !errors.Is(got, ErrGetSysinfoFailed) {
				t.Error("Err(): returned error is not a ErrGetSysinfoFailed")
			}
			if got.Error() != tc.want.Error() {
				t.Errorf("Err(): mismatch: got: %q want: %q", got, tc.want)
			}
		})
	}
}

func TestSystemInformationFromAPIMessage(t *testing.T) {
	for tn, tc := range map[string]struct {
		want    SystemInformation
		wantErr bool
		msg     *APIMessage
	}{
		"zero": {
			wantErr: true,
		},
		"no get_sysinfo module": {
			wantErr: true,
			msg: &APIMessage{
				RemoteAddress: &net.UDPAddr{
					IP:   net.ParseIP("1.2.3.4"),
					Port: 9999,
				},
				System: map[string]interface{}{
					"something": map[string]interface{}{
						"is": "wrong",
					},
				},
			},
		},
		"valid": {
			want: SystemInformation{
				RemoteAddress: &net.UDPAddr{
					IP:   net.ParseIP("1.2.3.4"),
					Port: 9999,
				},
				Alias:      "Test Device",
				RelayState: 1,
			},
			msg: &APIMessage{
				RemoteAddress: &net.UDPAddr{
					IP:   net.ParseIP("1.2.3.4"),
					Port: 9999,
				},
				System: map[string]interface{}{
					"get_sysinfo": map[string]interface{}{
						"alias":       "Test Device",
						"relay_state": 1,
					},
				},
			},
		},
	} {
		t.Run(tn, func(t *testing.T) {
			var got SystemInformation
			if err := got.FromAPIMessage(tc.msg); (err != nil) != tc.wantErr {
				t.Errorf("FromAPIMessage(): got unexpected error: %v", err)
			}
			if diff := cmp.Diff(tc.want, got); diff != "" {
				t.Errorf("FromAPIMessage(): mismatch (-got +want):\n%v", diff)
			}
		})
	}
}
