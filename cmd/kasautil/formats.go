package main

import (
	"fmt"
	"io"
	"sort"
	"text/tabwriter"
	"time"

	"gopkg.in/yaml.v2"

	"github.com/cfunkhouser/kasa"
)

type formatter func(io.Writer, []*kasa.SystemInformation)

func human(out io.Writer, infos []*kasa.SystemInformation) {
	if len(infos) == 0 {
		fmt.Fprintln(out, "No devices detected on local network")
		return
	}
	w := tabwriter.NewWriter(out, 0, 0, 2, ' ', tabwriter.DiscardEmptyColumns)
	fmt.Fprintln(w, "Address\tAlias\tState")
	for _, info := range infos {
		state := "Off"
		if info.RelayState == 1 {
			state = "On"
		}
		fmt.Fprintf(w, "%v\t%v\t%v\n", info.RemoteAddress, info.Alias, state)
	}
	w.Flush()
}

type fileSDConfig struct {
	Targets []string          `json:"targets,omitempty" yaml:"targets"`
	Labels  map[string]string `json:"labels,omitempty" yaml:"labels,omitempty"`
}

var now = time.Now

func promFileSD(out io.Writer, infos []*kasa.SystemInformation) {
	fmt.Fprintf(out, "# Generated by kasautil version %v\n", Version)
	fmt.Fprintf(out, "#           at %v\n", now().UTC().Format(time.RFC3339))
	fmt.Fprintln(out, "---")

	var d fileSDConfig
	if len(infos) > 0 {
		for _, info := range infos {
			d.Targets = append(d.Targets, info.RemoteAddress.String())
		}
		sort.Strings(d.Targets)
	}
	dd := []fileSDConfig{d}
	enc := yaml.NewEncoder(out)
	if err := enc.Encode(&dd); err != nil {
		fmt.Fprintf(out, "# There was an error generating promsd format output:\n# %v\n", err)
	}
}
