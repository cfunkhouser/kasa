package main

import (
	"bytes"
	"net"
	"testing"
	"time"

	"github.com/google/go-cmp/cmp"

	"github.com/cfunkhouser/kasa"
)

func TestHuman(t *testing.T) {
	for tn, tc := range map[string]struct {
		infos []*kasa.SystemInformation
		want  string
	}{
		"empty": {
			want: "No devices detected on local network\n",
		},
		"one on": {
			infos: []*kasa.SystemInformation{
				{
					RemoteAddress: &net.UDPAddr{
						IP:   net.ParseIP("1.2.3.4"),
						Port: 9999,
					},
					Alias:      "Test Device",
					RelayState: 1.0,
				},
			},
			want: "Address       Alias        State\n1.2.3.4:9999  Test Device  On\n",
		},
		"one on, one off": {
			infos: []*kasa.SystemInformation{
				{
					RemoteAddress: &net.UDPAddr{
						IP:   net.ParseIP("1.2.3.4"),
						Port: 9999,
					},
					Alias:      "Test Device",
					RelayState: 1.0,
				},
				{
					RemoteAddress: &net.UDPAddr{
						IP:   net.ParseIP("4.3.2.1"),
						Port: 9999,
					},
					Alias: "Other Device",
				},
			},
			want: "Address       Alias         State\n1.2.3.4:9999  Test Device   On\n4.3.2.1:9999  Other Device  Off\n",
		},
	} {
		t.Run(tn, func(t *testing.T) {
			var b bytes.Buffer
			human(&b, tc.infos)
			got := b.String()
			if diff := cmp.Diff(tc.want, got); diff != "" {
				t.Errorf("human(): mismatch (-got +want):\n%v", diff)
			}
		})
	}
}

func TestPromFileSD(t *testing.T) {
	origNow := now
	defer func() { now = origNow }()
	now = func() time.Time {
		return time.Date(2017, time.August, 19, 22, 16, 0, 0, time.UTC)
	}

	for tn, tc := range map[string]struct {
		infos []*kasa.SystemInformation
		want  string
	}{
		"empty": {
			want: "# Generated by kasautil version development\n#           at 2017-08-19T22:16:00Z\n---\n- targets: []\n",
		},
		"one": {
			infos: []*kasa.SystemInformation{
				{
					RemoteAddress: &net.UDPAddr{
						IP:   net.ParseIP("1.2.3.4"),
						Port: 9999,
					},
					Alias:      "Test Device",
					RelayState: 1.0,
				},
			},
			want: "# Generated by kasautil version development\n#           at 2017-08-19T22:16:00Z\n---\n- targets:\n  - 1.2.3.4:9999\n",
		},
		"lexical ordering": {
			infos: []*kasa.SystemInformation{
				{
					RemoteAddress: &net.UDPAddr{
						IP:   net.ParseIP("10.42.0.10"),
						Port: 9999,
					},
				},
				{
					RemoteAddress: &net.UDPAddr{
						IP:   net.ParseIP("10.42.0.11"),
						Port: 9999,
					},
				},
				{
					RemoteAddress: &net.UDPAddr{
						IP:   net.ParseIP("10.69.0.1"),
						Port: 9999,
					},
				},
				{
					RemoteAddress: &net.UDPAddr{
						IP:   net.ParseIP("100.200.24.7"),
						Port: 9999,
					},
				},
			},
			want: "# Generated by kasautil version development\n#           at 2017-08-19T22:16:00Z\n---\n- targets:\n  - 10.42.0.10:9999\n  - 10.42.0.11:9999\n  - 10.69.0.1:9999\n  - 100.200.24.7:9999\n",
		},
	} {
		t.Run(tn, func(t *testing.T) {
			var b bytes.Buffer
			promFileSD(&b, tc.infos)
			got := b.String()
			if diff := cmp.Diff(tc.want, got); diff != "" {
				t.Errorf("promFileSD(): mismatch (-got +want):\n%v", diff)
			}
		})
	}
}
